# load start
echo "loading zshrc..."

# -- zsh plugins
# zsh-plugins for mac
if type brew &> /dev/null; then
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
fi

source ~/.zplug/init.zsh

zplug "zsh-users/zsh-completions"
FPATH={{ .rust.cargo_completions }}:$FPATH
autoload -Uz compinit
compinit

zplug "zsh-users/zsh-autosuggestions"
bindkey '^[[13;2u' autosuggest-accept


if ! zplug check --verbose; then
   printf "Install?[y/N]: "
   if read -q; then
       echo; zplug install
   fi
fi

zplug load --verbose
# --

# util function
# -- fzf function
{{- if ne .cp.library "" }}
# library copy command for competitive programming
ccp() {
    local cpfile

    cpfile=$(find {{ .cp.library }} \( -name "*.cpp" -o -name "*.go" -o -name "*.hs" -o -name "*.bc" -o -name "*.hpp" \) -not -path '*/z_test/*' -not -path '*/.ccls-cache/*' -type f -print 2> /dev/null | fzf)
    if type "oj-bundle" > /dev/null 2>&1; then
        oj-bundle $cpfile | xsel -b
        echo "Copied $cpfile (by oj-bundle)"
    else
        cat $cpfile | xsel -b
        echo "Copied $cpfile (by cat)"
    fi

}
{{- end }}

{{- if ne .util.commandsFile "" }}
ccmd() {
    local commandFile

    commandFile=$(cat {{ .util.commandsFile }} | fzf)
    eval $commandFile
}
{{- end }}

# -- other function
fcp() {
    cat $1 | xsel -b
}

# Some util function
function stylingEcho() {
    if [[ "$1" == "modify" ]]; then
        echo "\e[32mModified(zsh overlap)\e[0m: $2"
    elif [[ "$1" == "ban" ]]; then
        echo "\e[31mBanned(zsh overlap)\e[0m: $2"
    fi
}

# ulimit
ulimit -Hs 131072
ulimit -s 131072


# command history
export HISTFILE=${HOME}/.zsh_history
export HISTSIZE=1000
export SAVEHIST=10000
setopt hist_ignore_dups
setopt EXTENDED_HISTORY

# alias and overlapping
## Language: Go
if type "go" > /dev/null 2>&1; then
    function go(){
        if [[ "$1" == "build" && -z "$2" ]]; then
            stylingEcho "modify" "default build output directory is build/"
            command go build -o build/
        else
            command go "$@"
        fi
    }
fi

## Language C++
if type "g++" > /dev/null 2>&1; then
    alias g++++="g++ -fsanitize=undefined -g -fno-omit-frame-pointer -Wall -Wextra"
fi

### OpenGL
function ccgl() {
    gcc "$@" -lglut -lGLU -lGL -lm -lstdc++;
}

## Language Python
source "$HOME/.rye/env"

# git
if type "git" > /dev/null 2>&1; then
    function git(){
        if [[ "$1" == "checkout" ]]; then
            stylingEcho "ban" "please use 'git switch' instead 'git checkout'"
        else
            command git "$@"
        fi

    }
    alias ga="git add"
    alias gc="git cz"
    alias gp="git push"
fi

if type "lazygit" > /dev/null 2>&1; then
    alias lg="lazygit"
fi

if type "github-transporter" > /dev/null 2>&1; then
    alias gt="github-transporter"
fi

# starship
if type "starship" > /dev/null 2>&1; then
    eval "$(starship init zsh)"
else
    echo "Not Found: Starship is not installed."
fi

# zoxide
if type "zoxide" > /dev/null 2>&1; then
    eval "$(zoxide init zsh)"
else
    echo "Not Found: zoxide is not installed."
fi

if type "tree" > /dev/null 2>&1; then
    alias tree="tree -I .git -I node_modules -L 3"
fi

if type "eza" > /dev/null 2>&1; then
    alias ls="eza --git"
fi

if type "delta" > /dev/null 2>&1; then
    alias diff="delta"
fi


{{- if ne .cp.library "" }}
export CP_Template={{.cp.library}}/cpp/template/basic.cpp

if type "cp-template" > /dev/null 2>&1; then
    alias cpt="cp-template"
fi
{{- end }}

if type "volta" > /dev/null 2>&1; then
    export VOLTA_HOME="$HOME/.volta"
    export PATH="$VOLTA_HOME/bin:$PATH"
fi

alias @="notify-send -i /usr/share/icons/Arc/status/128/dialog-information.png 'Process Finished' 'Process Finished'"

alias vim="noglob nvim"
alias vp='nvim -c ":e #<1"'

alias ce="chezmoi edit"


# VBox(for vagrant)
if [ $USER = 'vagrant' ]; then
    VBoxClient --clipboard
fi

#read .zshenv
if [ -e ${HOME}/.zshenv ]; then
    source ~/.zshenv
fi

# read .zprofile
if [ -e ${HOME}/.zprofile ]; then
    source ~/.zprofile
fi

# GPG sigunature
export GPG_TTY=$TTY

export TERM=xterm-256color
export EDITOR=nvim

# start X
if [ -z "${DISPLAY}" ] && [ "${XDG_VTNR}" -eq 1 ]; then
    exec startx
fi

# load end
echo "done."
